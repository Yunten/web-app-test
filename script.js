// script.js
document.addEventListener('DOMContentLoaded', function () {
    const carousel = document.getElementById('carousel');
    const scrollUpButton = document.getElementById('scroll-up');
    const scrollDownButton = document.getElementById('scroll-down');
    const toCurrentCityButton = document.getElementById('to-current-city');
    const visitsList = document.getElementById('visits-list');
    let countdownElement = document.getElementById('countdown');

    let current_city_index = 2

    // Array of cities
    const cities = [
        {
            name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            details: '–ö—Ä–∞—Å—É–π—Å—è –≥—Ä–∞–¥ –ü–µ—Ç—Ä–æ–≤ –∏ —Å—Ç–æ–π –Ω–µ–∫–æ–ª–µ–±–∏–º–æ –∫–∞–∫ –†–æ—Å—Å–∏—è &#x1f1f7;&#x1f1fa;',
            image:'spb',
            nextMove: Date.parse("2024-08-30 20:00:00"),
            visits: [
            ]
        },
        {
            name: '–¢—É–ª–∞',
            details: '–ü—Ä—è–Ω–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥',
            image:'tula',
            nextMove: Date.parse("2024-08-31 14:00:00"),
            visits: [
                {
                    id: 1,
                    name: '–ú—É–∑–µ–π –ø—Ä—è–Ω–∏–∫–æ–≤(–º–∞–≥–∞–∑)',
                    cost: 0,
                    startTime: '10:00 AM',
                    geoloc: '–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —É–ª–∏—Ü–∞, 45',
                    lat: 54.211387,
                    lng: 37.622091
                },
                {
                    id: 2,
                    name: '–ú—É–∑–µ–π –æ—Ä—É–∂–∏—è',
                    cost: 550,
                    startTime: '1:00 PM',
                    geoloc: '–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —É–ª., 2',
                    lat: 54.204136,
                    lng: 37.616189
                },
                {
                    id: 3,
                    name: '–ú—É–∑–µ–π –æ—Ä—É–∂–∏—è',
                    cost: 300,
                    startTime: '1:00 PM',
                    geoloc: '–ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 12–í',
                    lat: 54.195888,
                    lng: 37.619854
                },
                {
                    id: 4,
                    name: '–¶–ü–ö–ò–û –ü–∞—Ä–∫ –ë–µ–ª–æ—É—Å–æ–≤–∞',
                    cost: 0,
                    startTime: '1:00 PM',
                    geoloc: '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è —É–ª–∏—Ü–∞, 13',
                    lat: 54.183671, 
                    lng: 37.585970
                },
                {
                    id: 5,
                    name: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –®–∞—Ä–¥–µ–Ω',
                    cost: ':D',
                    startTime: '1:00 PM',
                    geoloc: '–°–æ–≤–µ—Ç—Å–∫–∞—è —É–ª., 11/5',
                    lat: 54.198263,  
                    lng: 37.613305
                }
            ]
        },
        {
            name: '–í–æ—Ä–æ–Ω–µ–∂',
            nextMove: Date.parse("2024-08-31 20:00:00"),
            details: '–ì–æ—Ä–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —Ñ–ª–æ—Ç–∞ü§î (—Ç–∞–∫ –≥–æ–≤–æ—Ä—è—Ç)',
            image:'vrnz',
            visits: [
                {
                    id: 1,
                    name: 'K–æ—Ä–∞–±–ª—å-–º—É–∑–µ–π –ì–æ—Ç–æ –ü—Ä–µ–¥–µ—Å—Ç–∏–Ω–∞—Ü–∏—è',
                    cost: 100,
                    startTime: '10:00 AM',
                    geoloc: '–ü–µ—Ç—Ä–æ–≤—Å–∫–∞—è –Ω–∞–±., 21–ê',
                    lat: 51.655763,
                    lng: 39.215621
                }
            ]
        },
        {
            name: '–†–æ—Å—Ç–æ–≤',
            nextMove: Date.parse("2024-09-01 15:00:00"),
            details: '–ü–∞–ø–∞',
            image:'rst',
            visits: [
                {
                    id: 1,
                    name: '–ü–∞—Ä–∞–º–æ–Ω–æ–≤—Å–∫–∏–µ —Å–∫–ª–∞–¥—ã',
                    cost: 100,
                    startTime: '10:00 AM',
                    geoloc: '–ë–µ—Ä–µ–≥–æ–≤–∞—è —É–ª., 47–ê',
                    lat: 47.218310, 
                    lng: 39.726852
                },
                {
                    id: 2,
                    name: '–†–æ—Å—Ç–æ–≤—Å–∫–∏–π —Ü–∏—Ä–∫ (–≤–æ—Ä–æ—Ç–∞ ;))',
                    cost: 0,
                    startTime: '10:00 AM',
                    geoloc: '–ë—É–¥—ë–Ω–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 45',
                    lat: 47.218310, 
                    lng: 39.726852
                }
            ]
        },
        {
            name: '–õ–∞–∑–∞—Ä–µ–≤—Å–∫–æ–µ (–°–æ—á–∏)',
            details: '',
            nextMove: Date.parse("2024-09-04 11:00:00"),
            image:'lazr',
            visits: [
                {
                    id: 1,
                    name: '–ß–∏–ª–ª',
                    cost: '–±–µ—Å—Ü–µ–Ω–Ω–æ',
                    startTime: '10:00 AM',
                    geoloc: '–ë–µ—Ä–µ–≥–æ–≤–∞—è —É–ª., 47–ê'
                }
            ]
        },
        {
            name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
            details: '',
            nextMove: Date.parse("2024-09-06 11:00:00"),
            image:'stlngrd',
            visits: [
                {
                    id: 1,
                    name: '–†–æ–¥–∏–Ω–∞ –º–∞—Ç—å',
                    cost: 0,
                    startTime: '10:00 AM',
                    geoloc: '–ú–∞–º–∞–µ–≤ –∫—É—Ä–≥–∞–Ω',
                    lat: 48.741583,
                    lng: 44.537209
                }
            ]
        },
        {
            name: '–°–∞–º–∞—Ä–∞',
            details: '',
            nextMove: Date.parse("2024-09-06 15:00:00"),
            image:'smr',
            visits: [
            ]
        },
        {
            name: '–¢–æ–ª—å—è—Ç—Ç–∏',
            details: '',
            nextMove: Date.parse("2024-09-06 20:00:00"),
            image:'tlt',
            visits: [
            ]
        },
        {
            name: '–ö–∞–∑–∞–Ω—å',
            details: '? - –±—Ä–∞–ª',
            nextMove: Date.parse("2024-09-07 19:00:00"),
            image:'kzn',
            visits: [
            ]
        },
        {
            name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            details: '',
            nextMove: Date.parse("2024-09-07 22:00:00"),
            image:'nn',
            visits: [
            ]
        },
        {
            name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            details: '–ö—Ä–∞—Å—É–π—Å—è –≥—Ä–∞–¥ –ü–µ—Ç—Ä–æ–≤ –∏ —Å—Ç–æ–π –Ω–µ–∫–æ–ª–µ–±–∏–º–æ –∫–∞–∫ –†–æ—Å—Å–∏—è &#x1f1f7;&#x1f1fa;',
            image:'spb',
            nextMove: Date.parse("2025-08-30 20:00:00"),
            visits: [
            ]
        }
    ];

    // Function to update city information
    function updateCityInfo() {
        // Clear existing carousel items
        carousel.innerHTML = '';

        // Add cities to carousel
        cities.forEach((city, index) => {
            const cityCard = document.createElement('div');
            cityCard.classList.add('carousel-item');
            if (index === current_city_index) cityCard.classList.add('current-city'); // Highlight the current city

            cityCard.style.backgroundImage = `url(cities/${city.image}.jpg)`;

            cityCard.innerHTML = `
                <div class="city-info">
                    <h1>${city.name}</h1>
                    <p>${city.details}</p>
                    ${index === current_city_index ? `<ul id="visits-list">${renderVisits(city.visits)}</ul>
                    <p>–í—Ä–µ–º—è –¥–æ –ø–æ–µ–∑–¥–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥: <span id="countdown">--</span></p>` : ''}
                </div>
            `;
            countdownElement = document.getElementById('countdown')
            countdownElement

            carousel.appendChild(cityCard);
        });

        // Start countdown for the current city
        if (cities[current_city_index].nextMove) {
            updateCountdown(cities[current_city_index].nextMove);
        }
    }

    // Function to render visits
    function renderVisits(visits) {
        return visits.map(visit => `
            <li>
                <span>
                    <input type="checkbox" class="checkbox" id="visit-${visit.id}" data-visit-id="${visit.id}">
                    ${visit.name} - ${visit.cost}‚ÇΩ –≤ ${visit.startTime}
                    <div class="geoloc">${visit.geoloc}</div>
                </span> 
                ${visit.lat ? `<img src="map_icon.png" class="map-icon" onclick="location.href='https://yandex.ru/maps/?ll=${visit.lng},${visit.lat}&z=19&l=map';" alt="Show on Map">`:''}
            </li>
        `).join('');
        
        //${visit.lat ? `<img src="map_icon.png" class="map-icon" onclick="openYandexMap(${visit.lat}, ${visit.lng})" alt="Show on Map">`:''}
    }

    // Function to update countdown timer
    function updateCountdown(nextMove) {
        const now = new Date().getTime();
        const distance = nextMove - now;

        if (distance < 0) {
            countdownElement.textContent = "–í—Ä–µ–º—è –¥–≤–∏–≥–∞—Ç—å—Å—è!";
            changeCity();  // Update to next city
            return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        countdownElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;

        setTimeout(() => updateCountdown(nextMove), 1000);
    }

    function changeCity() {
        current_city_index++
        carouselIndex = current_city_index
        updateCityInfo()
        updateCarouselPosition()
    }

    // Function to open Yandex Maps with coordinates
    window.openYandexMap = function(lat, lng) {
        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        const url = `https://yandex.ru/maps/?ll=${lng},${lat}&z=19&l=map`;

        if (isMobile) {
            window.location.href = url;
        } else {
            window.open(url, '_blank');
        }
    }

    // Function to handle checkbox state saving and styling
    document.addEventListener('change', function (event) {
        if (event.target.classList.contains('checkbox')) {
            const visitId = event.target.dataset.visitId;
            const isChecked = event.target.checked;
            const visitItem = event.target.closest('li');

            if (isChecked) {
                visitItem.classList.add('checked-visit');
            } else {
                visitItem.classList.remove('checked-visit');
            }
        }
    });

    // Function to update carousel position
    carouselIndex = current_city_index
    function updateCarouselPosition() {
        const itemHeight = carousel.querySelector('.carousel-item').offsetHeight;
        carousel.style.transform = `translateY(-${carouselIndex * itemHeight}px)`;
    }

    scrollUpButton.addEventListener('click', function () {
        if (carouselIndex > 0) {
            carouselIndex--;
            updateCarouselPosition();
        }
    });

    scrollDownButton.addEventListener('click', function () {
        if (carouselIndex < carousel.children.length - 1) {
            carouselIndex++;
            updateCarouselPosition();
        }
    });

    toCurrentCityButton.addEventListener('click', function () {
        carouselIndex = current_city_index; // Index of the current city
        updateCarouselPosition();
    });

    updateCityInfo();
});
